#define DASM_CHECKS 1
#include "dasm_proto.h"
#include "dasm_x86.h"
#include "types.h"
#include "compiler.h"
#include <sys/mman.h> 
#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#define MAP_ANONYMOUS MAP_ANON
#endif

static void* link_and_encode(dasm_State** d)
{
  size_t sz;
  void* buf;
  dasm_link(d, &sz);
#ifdef _WIN32
  buf = VirtualAlloc(0, sz, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
#else
  buf = mmap(0, sz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
#endif
  dasm_encode(d, buf);
#ifdef _WIN32
  {DWORD dwOld; VirtualProtect(buf, sz, PAGE_EXECUTE_READ, &dwOld); }
#else
  mprotect(buf, sz, PROT_READ | PROT_EXEC);
#endif
  return buf;
}

main_func compile(q_atom a)
{
  dasm_State *d;
  unsigned npc = 8;
  unsigned nextpc = 0;
  |.arch x64
  |.section code
  dasm_init(&d, DASM_MAXSECTION);
  |.globals lbl_
  void* labels[lbl__MAX];
  dasm_setupglobal(&d, labels, lbl__MAX);
  |.actionlist q_actions
  dasm_setup(&d, q_actions);
  dasm_growpc(&d, npc);
  dasm_State** Dst = &d;
  |.code
  |->q_main:
  | mov64 rax, 42L 
  | ret 
  link_and_encode(&d);
  dasm_free(&d);
  return (main_func)labels[lbl_q_main];
}
